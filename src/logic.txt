/*

MÃ©todo round

Class BowlingGame{
    //Tiros
    let turn = false; //representa turno 1 y 2
	
    roll(int nTiros){
        for (let rolls = 0; rolls < nRolls; rolls++) {
            let genRoll = random(0, 10) //representa el numero de pinos que derribo
            return rollType(genRoll);
        }
    }

    //Juegos   
    round(int nRound)){
        let round = 1       
        if(round != 10){
            roll(2)
            round++
        }else {
            roll(3)
        }
    }
    
     F round  de incremento con limite de 10 
       F (turno 1 = rnd(0/10)
        if turno 1 == 10 termina los intentos pasa siguiente round
        else turno 2 <= rnd(0/(10- turno1))
    )

    }
    
    //Work on it
	rollType(int fallenPins){
        switch(fallenPins){
            case 0:
                //Fail
                return null;
            break;
            case: (>0, 11<):
                //Normal roll
                return fallenPins;
            bereak;
            case: 10 && !turn:
                //Spare
                return fallenPins -10;
            break;
            case 10:
            break;
            default:
        }
	}

	fillBoard(){

    }


}

*/